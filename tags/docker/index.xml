<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on ebullient·works</title><link>/tags/docker.html</link><description>Recent content in docker on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Jekyll templates with Docker containers</title><link>/2017/05/02/jekyll.html</link><pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate><guid>/2017/05/02/jekyll.html</guid><description>&lt;p>It took me a few tries (divided attention, grr), but I realized that after messing with blogs for over 10 years, I&amp;rsquo;ve seen all the things! Way back in the beginning was Movable Type (which I didn&amp;rsquo;t realize was still a thing), followed by PHP-based CMS like Textpattern and Nucleus CMS, and then a brief flirtation with Blogger (someone made me do it). I have somehow avoided ever having to maintain templates for WordPress (?!). These systems all come back to some pretty basic concepts around templating.&lt;/p>
&lt;p>The one snag was loathing having to do anything with ruby. I have never had anything but grief and pain installing ruby anywhere. But hey! We have docker now! Put it in a container and forget about it. WOOT!&lt;/p></description></item><item><title>Docker script for AnyConnect on OSX</title><link>/2015/08/25/docker-script-for-anyconnect-on-osx.html</link><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>/2015/08/25/docker-script-for-anyconnect-on-osx.html</guid><description>I am queen of laziness, and I have to use AnyConnect, and that screws with Docker, and then I have to go looking to remember the magic incantation to get things right...
Who has time for that? I made a script that wraps the whole thing up and reminds me what I should do when it doesn't work.
Instead of: &amp;gt; docker-machine env default
I do this instead, and the script does the rest: &amp;gt; . dockerEnv
The contents of the script are pretty trivial (I am sure shell wizards can find plenty wrong with it, starting with the direct reference to bash, but whatever. Laziness, right?): #!/bin/bash UP=`docker-machine status default` if [ "$UP" != "Running" ] ; then echo "Starting default docker VM" docker-machine start default fi eval "$(docker-machine env default)" export DM_IP=$(docker-machine ip default) echo $DM_IP DM_SUBNET=192.168.$(echo $DM_IP| cut -d'.' -f 3) RESULT=`netstat -rn | grep $DM_SUBNET | grep vboxnet` if [ "$RESULT" = "" ] ; then echo "Adding route for vboxnet0" sudo route -nv add -net $DM_SUBNET -interface vboxnet0 RESULT=`netstat -rn | grep $DM_SUBNET | grep vboxnet` if [ $RESULT = "" ] ; then echo "Quit AnyConnect and re-run this script." exit fi fi docker-machine ls [edit on 3 Sept: updated for even better-ness. Laziness rocks.]</description></item><item><title>Crib notes: Docker on OSX</title><link>/2015/03/31/crib-notes-docker-on-osx.html</link><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>/2015/03/31/crib-notes-docker-on-osx.html</guid><description> Of course I'm messing with Docker (isn't everyone)? But as most people using OS X are discovering, there are some hiccups. Here are some notes for myself (and perhaps for others) about what is required to make docker work well on OS X: How to Use Docker on OS X: The Missing Guide Most helpful (and a simultaneous &amp;#8216;duh' moment) was his reminder: boot2docker is the host image for docker on OS X, so when docker maps ports, it maps them to boot2docker, and not to OS X itself. So there are some extra things that need to be done to make that work. He has lots of useful suggestions. I also use AnyConnect, which introduces it's own fun, as it likes to rewrite the routing table for giggles. I am thankfully not the only one with this problem. So there were good things to be gleaned here, too.</description></item></channel></rss>