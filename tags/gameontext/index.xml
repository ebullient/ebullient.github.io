<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gameontext on ebullient·works</title><link>/tags/gameontext.html</link><description>Recent content in gameontext on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 17 May 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/gameontext/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring IO 2019: Spring and the Mystery of the Polyglot Stack</title><link>/2019/05/17/spring-io-2019-spring-and-the-mystery-of-the-polyglot-stack.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>/2019/05/17/spring-io-2019-spring-and-the-mystery-of-the-polyglot-stack.html</guid><description>This was one of those sessions that did not go right.
The speaker before ran over, and there were two of us. We didn&amp;rsquo;t have time to get our microphones set up right. So switching between speakers, and between slides and demo was awkward at best.
It was no fun.
As this was a revisitation of our DevNexus talk, we knew it could work.. it just didn&amp;rsquo;t.</description></item><item><title>DevNexus 2019: Spring and the Mystery of the Polyglot Stack</title><link>/2019/02/18/spring-and-the-mystery-of-the-polyglot-stack.html</link><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><guid>/2019/02/18/spring-and-the-mystery-of-the-polyglot-stack.html</guid><description>Spring and the Mystery of the Polyglot Stack
Modern Cloud Native applications are not composed of a single language, or runtime. There are often local standards and requirements for individual services, intended to allow the application as a whole to be properly managed, and secure. In this talk, Erin and Ozzy will discuss what it means to be a Spring application in a polyglot environment, with a focus on interoperable security, logging, metrics, and including a brief boat trip to view the architectural considerations for a Spring Cloud application on Kubernetes.
This session has its root in some work Ozzy and I did with one of our customers.</description></item><item><title>Learning Microservices in the open with Game On! Text Adventure</title><link>/2018/06/06/Meetup-HVOpen.html</link><pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate><guid>/2018/06/06/Meetup-HVOpen.html</guid><description>Event: Learning Microservices in the open with Game On! Text Adventure</description></item><item><title>Index 2018: What is a Cloud Native application, anyway?</title><link>/2018/03/10/index-conference-cloud-native.html</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>/2018/03/10/index-conference-cloud-native.html</guid><description>&lt;p>I gave a few talks at &lt;strong>Index&lt;/strong> Developer Conference in San Francisco:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>A Workshop! Game-On Text Adventure re-presented in lab form, with some lessons learned along the way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Testing Cloud Native Applications&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is a Cloud Native Application, anyway? My first attempt at talking about what is going on with Cloud Native applications these days.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I did have a lovely interview with Kevin Allen beforehand:&lt;/p>
&lt;div class="embed video-player">
&lt;iframe id="y4aCcT_lmik" class="youtube-player" frameborder="0" allowfullscreen
allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
src="https://www.youtube.com/embed/y4aCcT_lmik">
&lt;/iframe>
&lt;/div></description></item><item><title>JavaOne 2017: Introduction to Reactive Systems</title><link>/2017/10/05/javaone-introduction-to-reactive-systems.html</link><pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate><guid>/2017/10/05/javaone-introduction-to-reactive-systems.html</guid><description>A Joint adventure with Lightbend, we lead folks in the workshop through a specialized version of our Game On! Text Adventure..
IBM and Lightbend are teaming up to introduce you to developing reactive microservices on Kubernetes. Lagom is a microservice framework built atop Lightbend’s tried-and-proven distributed systems toolkit, Akka. This framework helps you build microservices as systems—reactive systems, to be precise—so that your microservices are elastic and resilient by nature. The reactive programming model aims to ensure systems availability and performance while processing streaming data. You will use Lagom’s development environment to avoid tedious setup and scripting when developing locally and will deploy your application to a Kubernetes cluster, so others in the workshop (and at JavaOne) can test out what you built.
Slides: Why Reactive? With GameOn
Getting ready for our lab this afternoon -- HOL7896 at 4:30 PDT today! https://t.co/R3qrmisqL1
&amp;mdash; Erin Schnabel (@ebullientworks) October 2, 2017 https://github.com/lagom/lagom-gameon-example https://github.com/lagom/lagom-gameon-maven-archetype</description></item><item><title>IBM InterConnect 2017: Microservices, Twelve Factors, Security</title><link>/2017/03/28/ibm-interconnect-microservices-12-factors-security.html</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/28/ibm-interconnect-microservices-12-factors-security.html</guid><description>&lt;p>Lots to talk about this year. So many sessions.&lt;/p>
&lt;ol>
&lt;li>Best practices for creating secure microservices&lt;/li>
&lt;li>Creating Twelve Factor Applications with Liberty on Bluemix: a Practical Guide&lt;/li>
&lt;li>Monolithic Application to Microservice Architecture: How to break down your existing Application&lt;/li>
&lt;li>Real-World Microservice Development with IBM WebSphere Liberty: Game On!&lt;/li>
&lt;/ol>
&lt;p>There were a few more that I haven&amp;rsquo;t posted the charts for.. phew!&lt;/p></description></item><item><title>QCon SF 2016: Microservices and Sticky Notes, Game On!</title><link>/2016/11/06/qcon-sf-after-hours-microservices-and-elections.html</link><pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate><guid>/2016/11/06/qcon-sf-after-hours-microservices-and-elections.html</guid><description>&lt;p>This was an after hours session, served up alongside food and drinks.&lt;/p>
&lt;p>Attendees sat around big tables, laden with sticky notes, and were encouraged to brainstorm what a room for a text-based adventure game could be (without coding it, in this case). The intent was to mentally walk people through the problems where they usually get stuck if they are used to monolithic/traditional deployment environments, and then talk with their neighbors or ask questons for how to overcome problems as we get there.&lt;/p>
&lt;p>I know some did want to have the laptops out, but with food and drink, I thought it best if we stick with sticky notes and talking. ;)&lt;/p></description></item><item><title>OSCon London 2016: Game On! Microservices in the open</title><link>/2016/10/17/oscon-london.html</link><pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate><guid>/2016/10/17/oscon-london.html</guid><description>&lt;p>Kate Stanley and I took Game On Text Adventure to &lt;a href="https://www.oreilly.com/library/view/oscon-2016-/9781491958476/">OSCon London&lt;/a>! We spoke about our experiences building the game, and Kate created a new room in Java from scratch and showed the game finding the room, and coping as the service recycled in response to updates.&lt;/p>
&lt;div class="embed-container">
&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/oreillyconf/30274812452/in/album-72157674013324851/" title="_93A5318">&lt;img src="https://live.staticflickr.com/5748/30274812452_697d26193c_k.jpg" width="100%" alt="_93A5318">&lt;/a>
&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8">&lt;/script>
&lt;/div></description></item><item><title>JavaOne 2016: Game On! Microservices</title><link>/2016/09/12/javaone-game-on.html</link><pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate><guid>/2016/09/12/javaone-game-on.html</guid><description>&lt;p>We ran a contest! People wrote rooms for our game!
And I got to talk about it in a big room full of people!&lt;/p>
&lt;figure>&lt;img src="/files/2016-JavaOne-GO-Booth_edited.jpg"/>&lt;figcaption>
&lt;h4>Chilling with Ross Pavitt at the IBM booth&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Game On! Explore microservices with a text-based adventure</title><link>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</guid><description>Microservices: the buzz is everywhere. Given the breadth of technologies related to the term, it can be difficult to get a full picture of what a microservices architecture should look like, or to understand why it is said that microservices architectures both remove and introduce complexity at the same time. Game On! Text Adventure is a throwback text-based adventure built to help you explore microservices concepts.
There are lots of examples of microservices that go something like: type in this code, run this build, push this button, and then poof! you have your service! Others show how to install and configure a multi-process component like etcd or consul. They even sometimes describe how to then add a service to it, and maybe even sometimes how to find the added service. But, in a lot of ways, it all seems out of context. From those examples, I only got a glimpse of one piece at a time. I never got an understanding of how an application built using a collection of interacting microservices really worked.
The premise of Game On! is simple: we provide some core elements and then you create services (one or many) to extend the world. It provides a choose-your-own-adventure approach to learning about microservices. We have walk-throughs that do what many other examples do: follow some steps, push some buttons, and TA-DA! you have a working single service written in Java, JavaScript, or Go.
A difference, however, is that your shiny new service is registered as a part of a larger system right out of the gate. The APIs that your service implements will be called by elements of the long-running composed application. How you choose to play with the next steps (making the service resilient, load-balancing and scaling, dealing with eventual consistency) becomes something that can be explored without having to implement a whole bunch of pieces yourself.
More walk-throughs will be coming over time, with most building on the basic walk-throughs we have now.All of the source is available on GitHub. We hope you enjoy working with it as much as we enjoyed building it.</description></item><item><title>IBM InterConnect 2016: Microservices, Monoliths, and Async EE7</title><link>/2016/02/26/ibm-interconnect-monoliths-microservices-ee7.html</link><pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate><guid>/2016/02/26/ibm-interconnect-monoliths-microservices-ee7.html</guid><description>&lt;p>Lots to talk about this year!&lt;/p>
&lt;ol>
&lt;li>Creating Twelve Factor Applications with Liberty on Bluemix&lt;/li>
&lt;li>Don&amp;rsquo;t Wait! Develop responsive applications with Java EE7 instead!&lt;/li>
&lt;li>Evolving a monolithic Java EE application to microservices: Microservices meet legacy applications&lt;/li>
&lt;/ol>
&lt;p>There were a few more that I haven&amp;rsquo;t posted the charts for..&lt;/p></description></item><item><title>Swagger-first API design</title><link>/2016/01/27/swagger-first-api-design.html</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/27/swagger-first-api-design.html</guid><description>&lt;p>I've been working for the past few months on building Game On! a microservices-based application that is intended to show both what a microservices architecture looks like, and to make it easy for people to play with such a system without having to start from the ground up themselves.&lt;/p>
&lt;p>We started with a best-guess set of services, and over time, it became pretty apparent that our first pass at a map building service (the Concierge) was both misleading in purpose and insufficient in function. It did serve its purpose, filling in for service discovery in a way, but we were growing beyond what the service could do. &lt;/p></description></item><item><title>Shell prompt crazy for Git Submodules</title><link>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</link><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</guid><description>I've run a somewhat odd little script to generate my command prompt for years now, sets some colors, adds some indicators of what kind of shell I'm in (sudo or tmux/screen or ssh or.. ).
Given I now have to work with git and submodules, I've revised that to include information provided about git generated by this script: https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
The difference is worth it, in understanding at a glance what is going on without typing git status or variant every two seconds. ;)
I've also been using some very useful aliases to make working with submodules sane, as documented here: Game On! Advanced Adventures / Git Submodules</description></item></channel></rss>