<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on ebullient·works</title><link>/tags/java.html</link><description>Recent content in java on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>CodeOne 2019: Overcoming Obstacles: Streamline Your Move to the Cloud</title><link>/2019/09/17/codeone-appsody-for-java-development.html</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>/2019/09/17/codeone-appsody-for-java-development.html</guid><description>&lt;p>JavaOne is gone, CodeOne is here, and IBM attended to represent a new collection of open source projects attempting to aid companies adopt cloud native development.&lt;/p>
&lt;p>In an &lt;a href="https://share.transistor.fm/s/ee304a5c">interview with Luke Shantz&lt;/a>, I described what role I felt Appsody played in the Cloud-native development game, including how it could make developer's lives easier.&lt;/p>
&lt;p>&lt;strong>Edit&lt;/strong>: Not all of the tech we brought to CodeOne in 2019 lived for very long, but some of it did address real issues, and I imagine we'll see it creep back in via other methods.&lt;/p></description></item><item><title>Honored to be a Java Champion</title><link>/2019/09/05/honored-to-be-a-java-champion.html</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>/2019/09/05/honored-to-be-a-java-champion.html</guid><description>I am honored to join the Java Champion community. Heart is all aflutter.
Please welcome @ebullientworks to the Java Champion Community.
Thank you for all you do for our awesome @java ecosystem.
We hope to see you at the Java Champion briefing at @OracleCodeOne pic.twitter.com/YOK2xbGTag
&amp;mdash; Java Champions (@Java_Champions) September 5, 2019</description></item><item><title>Spring IO 2019: Spring and the Mystery of the Polyglot Stack</title><link>/2019/05/17/spring-io-2019-spring-and-the-mystery-of-the-polyglot-stack.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>/2019/05/17/spring-io-2019-spring-and-the-mystery-of-the-polyglot-stack.html</guid><description>This was one of those sessions that did not go right.
The speaker before ran over, and there were two of us. We didn't have time to get our microphones set up right. So switching between speakers, and between slides and demo was awkward at best.
It was no fun.
As this was a revisitation of our DevNexus talk, we knew it could work.. it just didn't.</description></item><item><title>DevNexus 2019: Spring and the Mystery of the Polyglot Stack</title><link>/2019/02/18/spring-and-the-mystery-of-the-polyglot-stack.html</link><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><guid>/2019/02/18/spring-and-the-mystery-of-the-polyglot-stack.html</guid><description>Spring and the Mystery of the Polyglot Stack
Modern Cloud Native applications are not composed of a single language, or runtime. There are often local standards and requirements for individual services, intended to allow the application as a whole to be properly managed, and secure. In this talk, Erin and Ozzy will discuss what it means to be a Spring application in a polyglot environment, with a focus on interoperable security, logging, metrics, and including a brief boat trip to view the architectural considerations for a Spring Cloud application on Kubernetes.
This session has its root in some work Ozzy and I did with one of our customers.</description></item><item><title>Code @ IBM Think 2019: Cloud-Native Security for Java</title><link>/2019/02/16/ibm-think-cloud-native-security.html</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>/2019/02/16/ibm-think-cloud-native-security.html</guid><description>&lt;p>Billy and I put together a tidy little talk about Cloud-Native
Security for Java applications to give at &amp;ldquo;Code @ Think&amp;rdquo; during
the annual IBM Think Conference.&lt;/p></description></item><item><title>Oracle CodeOne 2018: Reactive Java? Let Us Count the Ways</title><link>/2018/10/24/oracle-codeone-2018-reactive-java-let-us-count-the-ways.html</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>/2018/10/24/oracle-codeone-2018-reactive-java-let-us-count-the-ways.html</guid><description>Jabberwocky.
I can't make conference materials with a straight-face when left to my own devices, I just can't!
Reactive paradigms can be confusing, so Ozzy and I put this workshop together.
First, we give an overview of reactive operators. Using the Jabberwocky as input, we present participants with problems to solve.
First with RxJava, then with Spring WebFlux, and finally with Akka.
It was fun. ;)
The repo: https://github.com/IBM/reactive-code-workshop
Other references:
https://openliberty.io/blog/2018/10/18/meet-us-at-oc1-and-ece.html</description></item><item><title>CF Summit 2018: Cloud Native and the Java Ecosystem</title><link>/2018/04/19/cfsummit-java-ecosystem-collision.html</link><pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate><guid>/2018/04/19/cfsummit-java-ecosystem-collision.html</guid><description>&lt;p>I was the lead for the Java track for CF Summit 2018. We had a great slate of speakers.&lt;/p>
&lt;p>I was able to make attempt number two for the evolution of Cloud Native and the Java ecosystem.&lt;/p>
&lt;p>&lt;a href="https://cfna18.sched.com/event/DdaB/the-java-ecosystem-collision-what-is-the-future-of-cloud-native-erin-schnabel-ibm">The Java Ecosystem Collision: What is the Future of Cloud Native? - Erin Schnabel, IBM&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/NkBNLkmldnI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>IBM InterConnect 2017: Microservices, Twelve Factors, Security</title><link>/2017/03/28/ibm-interconnect-microservices-12-factors-security.html</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/28/ibm-interconnect-microservices-12-factors-security.html</guid><description>&lt;p>Lots to talk about this year. So many sessions.&lt;/p>
&lt;ol>
&lt;li>Best practices for creating secure microservices&lt;/li>
&lt;li>Creating Twelve Factor Applications with Liberty on Bluemix: a Practical Guide&lt;/li>
&lt;li>Monolithic Application to Microservice Architecture: How to break down your existing Application&lt;/li>
&lt;li>Real-World Microservice Development with IBM WebSphere Liberty: Game On!&lt;/li>
&lt;/ol>
&lt;p>There were a few more that I haven't posted the charts for.. phew!&lt;/p></description></item><item><title>SouJava: MicroProfile at IBM</title><link>/2017/02/02/soujava-microprofile-at-ibm.html</link><pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate><guid>/2017/02/02/soujava-microprofile-at-ibm.html</guid><description>&lt;p>What a hoot!&lt;/p>
&lt;p>While talking about MicroProfile at IBM, Alasdair and I also got some time to reflect on how Liberty was built and how it has grown&amp;hellip;&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/nGla6-g76M0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>OSCon London 2016: Game On! Microservices in the open</title><link>/2016/10/17/oscon-london.html</link><pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate><guid>/2016/10/17/oscon-london.html</guid><description>&lt;p>Kate Stanley and I took Game On Text Adventure to &lt;a href="https://www.oreilly.com/library/view/oscon-2016-/9781491958476/">OSCon London&lt;/a>! We spoke about our experiences building the game, and Kate created a new room in Java from scratch and showed the game finding the room, and coping as the service recycled in response to updates.&lt;/p>
&lt;div class="embed-container">
&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/oreillyconf/30274812452/in/album-72157674013324851/" title="_93A5318">&lt;img src="https://live.staticflickr.com/5748/30274812452_697d26193c_k.jpg" width="100%" alt="_93A5318">&lt;/a>
&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8">&lt;/script>
&lt;/div></description></item><item><title>JavaOne 2016: Game On! Microservices</title><link>/2016/09/12/javaone-game-on.html</link><pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate><guid>/2016/09/12/javaone-game-on.html</guid><description>&lt;p>We ran a contest! People wrote rooms for our game!
And I got to talk about it in a big room full of people!&lt;/p>
&lt;figure>
&lt;img src="/files/2016-JavaOne-GO-Booth_edited.jpg"/> &lt;figcaption>
&lt;h4>Chilling with Ross Pavitt at the IBM booth&lt;/h4>
&lt;/figcaption>
&lt;/figure></description></item><item><title>Game On! Explore microservices with a text-based adventure</title><link>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</guid><description>Microservices: the buzz is everywhere. Given the breadth of technologies related to the term, it can be difficult to get a full picture of what a microservices architecture should look like, or to understand why it is said that microservices architectures both remove and introduce complexity at the same time. Game On! Text Adventure is a throwback text-based adventure built to help you explore microservices concepts.
There are lots of examples of microservices that go something like: type in this code, run this build, push this button, and then poof! you have your service! Others show how to install and configure a multi-process component like etcd or consul. They even sometimes describe how to then add a service to it, and maybe even sometimes how to find the added service. But, in a lot of ways, it all seems out of context. From those examples, I only got a glimpse of one piece at a time. I never got an understanding of how an application built using a collection of interacting microservices really worked.
The premise of Game On! is simple: we provide some core elements and then you create services (one or many) to extend the world. It provides a choose-your-own-adventure approach to learning about microservices. We have walk-throughs that do what many other examples do: follow some steps, push some buttons, and TA-DA! you have a working single service written in Java, JavaScript, or Go.
A difference, however, is that your shiny new service is registered as a part of a larger system right out of the gate. The APIs that your service implements will be called by elements of the long-running composed application. How you choose to play with the next steps (making the service resilient, load-balancing and scaling, dealing with eventual consistency) becomes something that can be explored without having to implement a whole bunch of pieces yourself.
More walk-throughs will be coming over time, with most building on the basic walk-throughs we have now.All of the source is available on GitHub. We hope you enjoy working with it as much as we enjoyed building it.</description></item><item><title>IBM InterConnect 2016: Microservices, Monoliths, and Async EE7</title><link>/2016/02/26/ibm-interconnect-monoliths-microservices-ee7.html</link><pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate><guid>/2016/02/26/ibm-interconnect-monoliths-microservices-ee7.html</guid><description>&lt;p>Lots to talk about this year!&lt;/p>
&lt;ol>
&lt;li>Creating Twelve Factor Applications with Liberty on Bluemix&lt;/li>
&lt;li>Don't Wait! Develop responsive applications with Java EE7 instead!&lt;/li>
&lt;li>Evolving a monolithic Java EE application to microservices: Microservices meet legacy applications&lt;/li>
&lt;/ol>
&lt;p>There were a few more that I haven't posted the charts for..&lt;/p></description></item><item><title>Swagger-first API design</title><link>/2016/01/27/swagger-first-api-design.html</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/27/swagger-first-api-design.html</guid><description>&lt;p>I've been working for the past few months on building Game On! a microservices-based application that is intended to show both what a microservices architecture looks like, and to make it easy for people to play with such a system without having to start from the ground up themselves.&lt;/p>
&lt;p>We started with a best-guess set of services, and over time, it became pretty apparent that our first pass at a map building service (the Concierge) was both misleading in purpose and insufficient in function. It did serve its purpose, filling in for service discovery in a way, but we were growing beyond what the service could do. &lt;/p></description></item><item><title>Don't Wait! Play with Async EE7 instead</title><link>/2015/08/21/don-t-wait-build-responsive-applications-with-java-ee-7-instead.html</link><pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate><guid>/2015/08/21/don-t-wait-build-responsive-applications-with-java-ee-7-instead.html</guid><description> Note: Originally posted on IBM DeveloperWorks. Some of this content is old, but the gist is still useful.
Java EE 7 introduced additional support for asynchronous request processing over and above the asynchronous servlets and EJBs that were provided in Java EE 6. Java EE 7 includes support for WebSockets, non-blocking I/O in Servlet 3.1, asynchronous processing in JAX-RS 2.0, and Concurrency Utilities for container-supported multi-threading. All of these capabilities have a role to play in making new flavors of applications and application architectures more responsive and efficient.
Responsive applications to improve the user experience Consider single page applications (SPA). JavaScript is loaded and run on the client-side as a long-running process (for as long as that browser window/tab, or mobile phone application is active). If you’ve used Gmail or Facebook, or have done some shopping at Amazon, you know what an SPA looks and feels like. When working with an SPA, the user no longer experiences a full page refresh: event-driven, partial page updates are the norm in this environment.
An SPA client generates multiple separate requests to the back-end server to populate different areas of the page. From a user experience point of view, this is great! No blank pages of doom! No tapping of fingers waiting for something to load before you give up and go do something else. Things are a little different when looking at what happens to the supporting infrastructure.
Handling connections to responsive applications If the application happens to have frequent updates with small payloads, connection management can become a real problem. The metadata for the HTTP request alone can dwarf the size of the payload it needs to carry, never mind the cost of establishing connections, dealing with proxies, or performing SSL handshakes. There are some connection management tricks that can be played to reduce the overhead, but there is a trade-off in complexity, especially if you want data to be able to flow both ways.
Using WebSockets upgrades an established HTTP connection into a persistent connection that allows for efficient two-way communication between the client and the server. This eliminates the overhead and complexity of managing multiple connections to achieve the same end. Chat applications everywhere, rejoice!
What happens if the application is running on an under-powered client, or on a client on a slow network? Non-blocking I/O support introduced in Servlet 3.1 allows the server-side application to define handlers that can be used to read or write the next chunk of data when the opposite end of the connection is finally ready to provide or receive it. In the meanwhile, the server-side application can happily be handling other requests.
Asynchronous support in JAX-RS 2.0 What I think will get the most attention and use is async support in JAX-RS 2.0, mostly because HTTP/REST is such a commonly used protocol. Using the @Suspended annotation allows the association between the inbound connection and the request-processing thread to be broken (suspended). That association can then be resumed later to send the response. When combined with either Asynchronous EJBs (of the lite variety) or Concurrency Utilities (to help with context propagation), there is a lot more flexibility with how work is processed on the server-side.
I put together a collection of samples to show what these technologies look like in use. They are small and simple and have their origins in my IBM Interconnect session from February 2015. They are progressive in nature, beginning usually with the pre-Java EE 7 status quo, and then stepping through using the technology and, in some cases, showing some alternate usage patterns.
I hope you find them useful, feedback is welcome!
WebSockets: WASdev/sample.async.websockets Servlet Non-blocking I/O: WASdev/sample.async.servletnio Async support in JAX-RS 2.0: WASdev/sample.async.jaxrs</description></item><item><title>IBM Impact 2014: WebSockets and Liberty Deployment Topologies</title><link>/2014/05/03/ibm-impact-2014-websockets-and-liberty-deployment-topologies.html</link><pubDate>Sat, 03 May 2014 00:00:00 +0000</pubDate><guid>/2014/05/03/ibm-impact-2014-websockets-and-liberty-deployment-topologies.html</guid><description>&lt;p>This was also my first talk in a long time, given in a big ballroom. Nothing like jumping right in.&lt;/p>
&lt;ol>
&lt;li>WebSockets for Java EE&lt;/li>
&lt;li>Liberty Series: WebSphere Liberty Profile Deployment Topologies (with Chris Vignola)&lt;/li>
&lt;/ol></description></item></channel></rss>