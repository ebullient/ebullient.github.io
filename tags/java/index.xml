<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on ebullient·works</title><link>/tags/java.html</link><description>Recent content in java on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>CodeOne 2019: Overcoming Obstacles: Streamline Your Move to the Cloud</title><link>/2019/09/17/codeone-appsody-for-java-development.html</link><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid>/2019/09/17/codeone-appsody-for-java-development.html</guid><description>&lt;p>JavaOne is gone, CodeOne is here, and IBM attended to represent a new collection of open source projects attempting to aid companies adopt cloud native development.&lt;/p>
&lt;p>In an &lt;a href="https://share.transistor.fm/s/ee304a5c">interview with Luke Shantz&lt;/a>, I described what role I felt Appsody played in the Cloud-native development game, including how it could make developer's lives easier.&lt;/p>
&lt;p>&lt;strong>Edit&lt;/strong>: Not all of the tech we brought to CodeOne in 2019 lived for very long, but some of it did address real issues, and I imagine we'll see it creep back in via other methods.&lt;/p></description></item><item><title>Honored to be a Java Champion</title><link>/2019/09/05/honored-to-be-a-java-champion.html</link><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid>/2019/09/05/honored-to-be-a-java-champion.html</guid><description>I am honored to join the Java Champion community. Heart is all aflutter.
Please welcome @ebullientworks to the Java Champion Community.
Thank you for all you do for our awesome @java ecosystem.
We hope to see you at the Java Champion briefing at @OracleCodeOne pic.twitter.com/YOK2xbGTag
&amp;mdash; Java Champions (@Java_Champions) September 5, 2019</description></item><item><title>Spring IO 2019: Spring and the Mystery of the Polyglot Stack</title><link>/2019/05/17/spring-io-2019-spring-and-the-mystery-of-the-polyglot-stack.html</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>/2019/05/17/spring-io-2019-spring-and-the-mystery-of-the-polyglot-stack.html</guid><description>This was one of those sessions that did not go right.
The speaker before ran over, and there were two of us. We didn't have time to get our microphones set up right. So switching between speakers, and between slides and demo was awkward at best.
It was no fun.
As this was a revisitation of our DevNexus talk, we knew it could work.. it just didn't.</description></item><item><title>DevNexus 2019: Spring and the Mystery of the Polyglot Stack</title><link>/2019/02/18/spring-and-the-mystery-of-the-polyglot-stack.html</link><pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate><guid>/2019/02/18/spring-and-the-mystery-of-the-polyglot-stack.html</guid><description>Spring and the Mystery of the Polyglot Stack
Modern Cloud Native applications are not composed of a single language, or runtime. There are often local standards and requirements for individual services, intended to allow the application as a whole to be properly managed, and secure. In this talk, Erin and Ozzy will discuss what it means to be a Spring application in a polyglot environment, with a focus on interoperable security, logging, metrics, and including a brief boat trip to view the architectural considerations for a Spring Cloud application on Kubernetes.
This session has its root in some work Ozzy and I did with one of our customers.</description></item><item><title>Oracle CodeOne 2018: Reactive Java? Let Us Count the Ways</title><link>/2018/10/24/oracle-codeone-2018-reactive-java-let-us-count-the-ways.html</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>/2018/10/24/oracle-codeone-2018-reactive-java-let-us-count-the-ways.html</guid><description>Jabberwocky.
I can't make conference materials with a straight-face when left to my own devices, I just can't!
Reactive paradigms can be confusing, so Ozzy and I put this workshop together.
First, we give an overview of reactive operators. Using the Jabberwocky as input, we present participants with problems to solve.
First with RxJava, then with Spring WebFlux, and finally with Akka.
It was fun. ;)
The repo: https://github.com/IBM/reactive-code-workshop
Other references:
https://openliberty.io/blog/2018/10/18/meet-us-at-oc1-and-ece.html</description></item><item><title>Game On! Explore microservices with a text-based adventure</title><link>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</guid><description>Microservices: the buzz is everywhere. Given the breadth of technologies related to the term, it can be difficult to get a full picture of what a microservices architecture should look like, or to understand why it is said that microservices architectures both remove and introduce complexity at the same time. Game On! Text Adventure is a throwback text-based adventure built to help you explore microservices concepts.
There are lots of examples of microservices that go something like: type in this code, run this build, push this button, and then poof! you have your service! Others show how to install and configure a multi-process component like etcd or consul. They even sometimes describe how to then add a service to it, and maybe even sometimes how to find the added service. But, in a lot of ways, it all seems out of context. From those examples, I only got a glimpse of one piece at a time. I never got an understanding of how an application built using a collection of interacting microservices really worked.
The premise of Game On! is simple: we provide some core elements and then you create services (one or many) to extend the world. It provides a choose-your-own-adventure approach to learning about microservices. We have walk-throughs that do what many other examples do: follow some steps, push some buttons, and TA-DA! you have a working single service written in Java, JavaScript, or Go.
A difference, however, is that your shiny new service is registered as a part of a larger system right out of the gate. The APIs that your service implements will be called by elements of the long-running composed application. How you choose to play with the next steps (making the service resilient, load-balancing and scaling, dealing with eventual consistency) becomes something that can be explored without having to implement a whole bunch of pieces yourself.
More walk-throughs will be coming over time, with most building on the basic walk-throughs we have now.All of the source is available on GitHub. We hope you enjoy working with it as much as we enjoyed building it.</description></item><item><title>Swagger-first API design</title><link>/2016/01/27/swagger-first-api-design.html</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/27/swagger-first-api-design.html</guid><description>&lt;p>I've been working for the past few months on building Game On! a microservices-based application that is intended to show both what a microservices architecture looks like, and to make it easy for people to play with such a system without having to start from the ground up themselves.&lt;/p>
&lt;p>We started with a best-guess set of services, and over time, it became pretty apparent that our first pass at a map building service (the Concierge) was both misleading in purpose and insufficient in function. It did serve its purpose, filling in for service discovery in a way, but we were growing beyond what the service could do. &lt;/p></description></item></channel></rss>