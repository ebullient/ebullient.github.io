<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservices on ebullient·works</title><link>/tags/microservices.html</link><description>Recent content in microservices on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>DevNexus 2021: The Mechanics of Metrics</title><link>/2021/03/05/DevNexus-mechanics-of-metrics.html</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>/2021/03/05/DevNexus-mechanics-of-metrics.html</guid><description>&lt;p>A reframing of the metrics talk, with a much more detailed look at how emitted metrics are aggregated by PromQL / Grafana dashboards.&lt;/p>
&lt;p>I quite like this one, to be honest.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/ru7ySIqa6qI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>J4K 2020: Metrics for the win!</title><link>/2020/11/12/metrics-for-the-win-at-j4k.html</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>/2020/11/12/metrics-for-the-win-at-j4k.html</guid><description>&lt;p>A longer form of Metrics for the Win! recorded for J4K, which occurred in
October of 2020.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/emOBXgDZ9Pc" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>D&amp;D and Metrics: an unexpected journey</title><link>/2020/11/09/an-unexpected-journey-with-metrics.html</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><guid>/2020/11/09/an-unexpected-journey-with-metrics.html</guid><description>I was asked, based solely on the abstract for my 2020 DevNexus talk, if I would be interested in writing an article on the topic. I agreed. The resulting article was published in Germina, in the September 2020 issue of Java Magazin, with &amp;ldquo;Dungeons &amp;amp; Dragons&amp;rdquo; as the title. I have a lovely hard-copy in my office.
The English version was first published at JAXenter as &amp;ldquo;Monsters in combat: exploring application metrics with D&amp;amp;D&amp;rdquo;.
I hope you enjoy it.
Publication:
Schnabel, E. (2020, September). Dungeons &amp;amp; Dragons: An adventure full of monsters, battles, and application metrics. Java Magazin, 82–94. https://kiosk.entwickler.de/java-magazin/java-magazin-9-2020/dungeons-dragons/
First publication, in German Schnabel, E. (2020, November 9). Monsters in combat: exploring application metrics with D&amp;amp;D. JAXenter. https://jaxenter.com/metrics-dnd-173311.html Schnabel, E. (2020, November 3). Monsters in combat: exploring application metrics with D&amp;amp;D. DevOps Conference Blog. https://devopscon.io/blog/monsters-in-combat-exploring-application-metrics-with-dd Schnabel, E. (2021, January 21). Monsters in Combat: Exploring Application Metrics with Dungeons &amp;amp; Dragons. DEVOPS MAGAZINE, 43–53. https://devopscon.io/whitepaper/devops-magazine-1-21/</description></item><item><title>JConf 2020: Metrics for the win!</title><link>/2020/10/12/metrics-for-the-win-at-jconf.html</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>/2020/10/12/metrics-for-the-win-at-jconf.html</guid><description>&lt;p>A fully online recorded talk, sliding in at just 30 minutes, for JConf in the fall of 2020.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/YK4e3wefqWY" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Code @ IBM Think 2019: Cloud-Native Security for Java</title><link>/2019/02/16/ibm-think-cloud-native-security.html</link><pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate><guid>/2019/02/16/ibm-think-cloud-native-security.html</guid><description>&lt;p>Billy and I put together a tidy little talk about Cloud-Native
Security for Java applications to give at &amp;ldquo;Code @ Think&amp;rdquo; during
the annual IBM Think Conference.&lt;/p></description></item><item><title>Learning Microservices in the open with Game On! Text Adventure</title><link>/2018/06/06/Meetup-HVOpen.html</link><pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate><guid>/2018/06/06/Meetup-HVOpen.html</guid><description>Event: Learning Microservices in the open with Game On! Text Adventure</description></item><item><title>CF Summit 2018: Cloud Native and the Java Ecosystem</title><link>/2018/04/19/cfsummit-java-ecosystem-collision.html</link><pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate><guid>/2018/04/19/cfsummit-java-ecosystem-collision.html</guid><description>&lt;p>I was the lead for the Java track for CF Summit 2018. We had a great slate of speakers.&lt;/p>
&lt;p>I was able to make attempt number two for the evolution of Cloud Native and the Java ecosystem.&lt;/p>
&lt;p>&lt;a href="https://cfna18.sched.com/event/DdaB/the-java-ecosystem-collision-what-is-the-future-of-cloud-native-erin-schnabel-ibm">The Java Ecosystem Collision: What is the Future of Cloud Native? - Erin Schnabel, IBM&lt;/a>&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/NkBNLkmldnI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Index 2018: What is a Cloud Native application, anyway?</title><link>/2018/03/10/index-conference-cloud-native.html</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>/2018/03/10/index-conference-cloud-native.html</guid><description>&lt;p>I gave a few talks at &lt;strong>Index&lt;/strong> Developer Conference in San Francisco:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>A Workshop! Game-On Text Adventure re-presented in lab form, with some lessons learned along the way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Testing Cloud Native Applications&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is a Cloud Native Application, anyway? My first attempt at talking about what is going on with Cloud Native applications these days.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>I did have a lovely interview with Kevin Allen beforehand:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/y4aCcT_lmik" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>IBM InterConnect 2017: Microservices, Twelve Factors, Security</title><link>/2017/03/28/Interconnect.html</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>/2017/03/28/Interconnect.html</guid><description>&lt;p>Lots to talk about this year. So many sessions.&lt;/p>
&lt;ol>
&lt;li>Best practices for creating secure microservices&lt;/li>
&lt;li>Creating Twelve Factor Applications with Liberty on Bluemix: a Practical Guide&lt;/li>
&lt;li>Monolithic Application to Microservice Architecture: How to break down your existing Application&lt;/li>
&lt;li>Real-World Microservice Development with IBM WebSphere Liberty: Game On!&lt;/li>
&lt;/ol>
&lt;p>There were a few more that I haven't posted the charts for.. phew!&lt;/p></description></item><item><title>SouJava: MicroProfile at IBM</title><link>/2017/02/02/soujava-microprofile-at-ibm.html</link><pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate><guid>/2017/02/02/soujava-microprofile-at-ibm.html</guid><description>&lt;p>What a hoot!&lt;/p>
&lt;p>While talking about MicroProfile at IBM, Alasdair and I also got some time to reflect on how Liberty was built and how it has grown&amp;hellip;&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/nGla6-g76M0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>OSCon London 2016: Game On! Microservices in the open</title><link>/2016/10/17/oscon-london.html</link><pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate><guid>/2016/10/17/oscon-london.html</guid><description>&lt;p>Kate Stanley and I took Game On Text Adventure to &lt;a href="https://www.oreilly.com/library/view/oscon-2016-/9781491958476/">OSCon London&lt;/a>! We spoke about our experiences building the game, and Kate created a new room in Java from scratch and showed the game finding the room, and coping as the service recycled in response to updates.&lt;/p>
&lt;div class="embed-container">
&lt;a data-flickr-embed="true" href="https://www.flickr.com/photos/oreillyconf/30274812452/in/album-72157674013324851/" title="_93A5318">&lt;img src="https://live.staticflickr.com/5748/30274812452_697d26193c_k.jpg" width="100%" alt="_93A5318">&lt;/a>
&lt;/div>
&lt;script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8">&lt;/script></description></item><item><title>JavaOne 2016: Game On! Microservices</title><link>/2016/09/12/javaone-game-on.html</link><pubDate>Mon, 12 Sep 2016 00:00:00 +0000</pubDate><guid>/2016/09/12/javaone-game-on.html</guid><description>&lt;p>We ran a contest! People wrote rooms for our game!
And I got to talk about it in a big room full of people!&lt;/p></description></item><item><title>Game On! Explore microservices with a text-based adventure</title><link>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</guid><description>Microservices: the buzz is everywhere. Given the breadth of technologies related to the term, it can be difficult to get a full picture of what a microservices architecture should look like, or to understand why it is said that microservices architectures both remove and introduce complexity at the same time. Game On! Text Adventure is a throwback text-based adventure built to help you explore microservices concepts.
There are lots of examples of microservices that go something like: type in this code, run this build, push this button, and then poof! you have your service! Others show how to install and configure a multi-process component like etcd or consul. They even sometimes describe how to then add a service to it, and maybe even sometimes how to find the added service. But, in a lot of ways, it all seems out of context. From those examples, I only got a glimpse of one piece at a time. I never got an understanding of how an application built using a collection of interacting microservices really worked.
The premise of Game On! is simple: we provide some core elements and then you create services (one or many) to extend the world. It provides a choose-your-own-adventure approach to learning about microservices. We have walk-throughs that do what many other examples do: follow some steps, push some buttons, and TA-DA! you have a working single service written in Java, JavaScript, or Go.
A difference, however, is that your shiny new service is registered as a part of a larger system right out of the gate. The APIs that your service implements will be called by elements of the long-running composed application. How you choose to play with the next steps (making the service resilient, load-balancing and scaling, dealing with eventual consistency) becomes something that can be explored without having to implement a whole bunch of pieces yourself.
More walk-throughs will be coming over time, with most building on the basic walk-throughs we have now.All of the source is available on GitHub. We hope you enjoy working with it as much as we enjoyed building it.</description></item><item><title>IBM InterConnect 2016: Microservices, Monoliths, and Async EE7</title><link>/2016/02/26/Interconnect.html</link><pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate><guid>/2016/02/26/Interconnect.html</guid><description>&lt;p>Lots to talk about this year!&lt;/p>
&lt;ol>
&lt;li>Creating Twelve Factor Applications with Liberty on Bluemix&lt;/li>
&lt;li>Don't Wait! Develop responsive applications with Java EE7 instead!&lt;/li>
&lt;li>Evolving a monolithic Java EE application to microservices: Microservices meet legacy applications&lt;/li>
&lt;/ol>
&lt;p>There were a few more that I haven't posted the charts for..&lt;/p></description></item><item><title>Swagger-first API design</title><link>/2016/01/27/swagger-first-api-design.html</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/27/swagger-first-api-design.html</guid><description>&lt;p>I've been working for the past few months on building Game On! a microservices-based application that is intended to show both what a microservices architecture looks like, and to make it easy for people to play with such a system without having to start from the ground up themselves.&lt;/p>
&lt;p>We started with a best-guess set of services, and over time, it became pretty apparent that our first pass at a map building service (the Concierge) was both misleading in purpose and insufficient in function. It did serve its purpose, filling in for service discovery in a way, but we were growing beyond what the service could do. &lt;/p></description></item><item><title>Shell prompt crazy for Git Submodules</title><link>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</link><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</guid><description>I've run a somewhat odd little script to generate my command prompt for years now, sets some colors, adds some indicators of what kind of shell I'm in (sudo or tmux/screen or ssh or.. ).
Given I now have to work with git and submodules, I've revised that to include information provided about git generated by this script: https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
The difference is worth it, in understanding at a glance what is going on without typing git status or variant every two seconds. ;)
I've also been using some very useful aliases to make working with submodules sane, as documented here: Game On! Advanced Adventures / Git Submodules</description></item><item><title>Trying to tell the human story...</title><link>/2015/12/08/trying-to-tell-the-human-story.html</link><pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/08/trying-to-tell-the-human-story.html</guid><description>Writing is always hard. Writing technical stuff is hard. Writing technical stuff that doesn't sound like it is a regurgitated text book&amp;#8230; sigh
I've been leading a team working on or with Microservices at IBM (lots of people everywhere are doing things with microservices, this should come as no surprise). We've been specifically looking at how to modernize an existing Java EE application. There are articles about this, but they are all formal, and (to me) preachy.
We're doing the experiment live, so to speak. Taking the crufty Plants By WebSphere application and pulling it apart bit by bit. Our aim is to make sure you have a functional application at all times, and to frankly just share our thoughts as we try it.
Note: Sadly, all of the content we created was retired and archived when Liberty moved to its new home. It happens.</description></item><item><title>Secure Microservices: API Keys, Access Tokens, and Signed JWTs</title><link>/2015/12/04/secure-microservices-api-keys-access-tokens-and-signed-jwts.html</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/04/secure-microservices-api-keys-access-tokens-and-signed-jwts.html</guid><description>Note: Originally posted on IBM developerWorks. Some of this content is old, but the gist is still useful.
I believe these two things are true:
it is very important to secure your microservices it can be difficult to read documentation trying to explain how to secure your microservices We’ve built three samples for you, which we hope will be easy to read, and will teach you something new.
Using API keys to secure your microservice is Adam’s sample. He explains what API keys are, where they come from, and how they’re used. The sample code is available on github.
Using access tokens to secure microservices is the first of two from Ozzy. He explains how the access tokens created as a result of working with OAuth and OpenID Connect work and are used within a microservices architecture.
Using signed JSON Web Tokens (JWTs) to secure microservices builds on the previous article to explain how to use Signed JWTs to propagate identity instead of access tokens.
Go play!</description></item><item><title>Using Grok filters to parse Liberty Logs</title><link>/2015/09/02/logstash-and-liberty-optimizing-data-collection-for-the-cloud.html</link><pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate><guid>/2015/09/02/logstash-and-liberty-optimizing-data-collection-for-the-cloud.html</guid><description>Note: Originally posted on IBM DeveloperWorks. Some of this content is old, but the gist is still useful.
Microservice architectures are highly distributed, with services provided by individual processes that are scaled independently. Understanding and maintaining overall system health becomes increasingly difficult as the system grows; it becomes impractical to look at services instance-by-instance. Monitoring systems like nagios help, but what happens when things go wrong? It is not always possible (much less easy) to ssh into any given system. In some environments the filesystem used by any given instance is transient; when the process stops, the filesystem is cleaned up, including all the logs!
The ELK stack (Elasticsearch, Logstash, and Kibana) is a commonly used system for gathering data (both logs and metrics), and allowing that data to be aggregated, analyzed, visualized, and searched in useful ways.
In this post, I'll focus on getting the most out of WAS Liberty logs using logstash. This isn't the only way: the IBM WebSphere Liberty buildpack in Bluemix, for example, uses loggregator (Cloud Foundry) rather than logstash. But I do hope that this gives you some ideas for how to make the logging capabilities in WAS Liberty work for your environment.
Getting useful information to system streams When operating on its own, WAS Liberty produces a few different log files by default:
&amp;ldquo;console&amp;rdquo; output is lightly formatted and contains no timestamps. Failure/error messages and System.err are routed to STDERR, while other important messages and System.out, are routed to STDOUT. When run in the background via server start, both streams are collected into a console.log file. messages.log also collects System out, System err, as well as a larger subset of messages (including INFO). trace.log only appears if detailed trace is enabled. It includes output from all enabled log sources, including System.out and System.err. Having log messages go directly to STDOUT and/or STDERR is a good environment-agnostic practice for microservices (and is also one of the 12-factors). It is a pretty simple change to get formatted Liberty logs writing to STDOUT. To ensure we don't miss any messages from server bootstrap and startup, we'll do this via a bootstrap.properties file that contains:
# Write WLP logs to stdout directly com.ibm.ws.logging.trace.file.name=stdout As you might infer, this re-routes what would go to trace.log to STDOUT. Before this change, STDOUT when running Liberty looks something like this:
$ wlp/bin/server run Launching defaultServer (WebSphere Application Server 8.5.5.6/wlp-1.0.9.cl50620150610-1749) on Java HotSpot(TM) 64-Bit Server VM, version 1.7.0_72-b14 (en_US) [AUDIT ] CWWKE0001I: The server defaultServer has been launched. Afterwards, it looks more like (notice the leading timestamp and fixed fields):
$ wlp/bin/server run Launching defaultServer (WebSphere Application Server 8.5.5.6/wlp-1.0.9.cl50620150610-1749) on Java HotSpot(TM) 64-Bit Server VM, version 1.7.0_72-b14 (en_US) [8/25/15 12:40:44:479 EDT] 00000001 id= com.ibm.ws.kernel.launch.internal.FrameworkManager A CWWKE0001I: The server defaultServer has been launched. In some cases, this might be enough. If you're running Liberty in the foreground in a Docker container, Liberty's formatted log entries would now be spilling out as the Docker container's STDOUT. If the hosting environment does post-processing on that output, you may have nothing left to do.
Using logstash to post-process logs However, we can use logstash to process Liberty log output to produce more robust events. How you link logstash and Liberty together will depend on how and where Liberty is running. As a bare minimum useful for testing filters, you can try something like the following:
$ wlp/bin/server run | logstash -f /path/to/logstash.conf You can use the -e command line option to define your filters inline, but I'm starting with the configuration file up front because I'll spend the rest of the post adding things to it.
Changing the output / making sure it works I'll start with the log-processing equivalent of &amp;ldquo;Hello World&amp;rdquo;. Edit your logstash.conf file to contain:
input { stdin { } } output { stdout { } } You get back pretty much exactly what you had before (with a leading message about logstash startup being complete and additional leading logstash timestamps):
$ wlp/bin/server run | logstash -f logstash.conf Logstash startup completed 2015-08-26T22:23:04.587Z ec2db0f13b8f Launching defaultServer (WebSphere Application Server 8.5.5.6/wlp-1.0.9.cl50620150610-1749) on OpenJDK 64-Bit Server VM, version 1.8.0_45-internal-b14 (en) 2015-08-26T22:23:04.588Z ec2db0f13b8f [8/26/15 22:22:45:918 UTC] 00000001 id= com.ibm.ws.kernel.launch.internal.FrameworkManager A CWWKE0001I: The server defaultServer has been launched. This does increase the amount of time it takes before we can see that the server has started properly, as the messages piped through logstash get delayed a bit while logstash starts itself.
Debugging Given we're going to start doing crazy things, we'll want to be able to see how we changed what logstash stores for each entry. We'll use the rubydebug codec to do this:
output { stdout { codec =&amp;gt; rubydebug } ... } Once we add that, those first few lines now look like this (please do scroll right):
Handle multiple lines We're going to start adding filters in the next few sections. The first we will add is for multi-line output.
input { ... } filter { # Combine lines that do not start with &amp;quot;[&amp;quot; or # contain &amp;quot;WebSphere Application Server&amp;quot; with the previous message multiline { pattern =&amp;gt; &amp;quot;(^[)|(WebSphere Application Server)&amp;quot; negate =&amp;gt; true what =&amp;gt; &amp;quot;previous&amp;quot; } ## MORE HERE. } output { ... } Note first that the pattern is negated; we're asserting that any line that does not match the pattern is a continuation, and should be lumped together with the previous line.
Liberty log entries (and even wrapped System.out or System.err output) all start with a bracketed timestamp that looks something like, [8/26/15 22:22:45:918 UTC]. But, remember that first line of Liberty trace? &amp;ldquo;Launching defaultServer (WebSphere Application Server 8.5.5.6/wlp-1.0.9.cl50620150610-1749)&amp;quot;. Since this is the very first line of output, we have to account for it as a standalone line (go ahead and take it out if you don't believe me&amp;hellip; ).
Without logstash (just using raw Liberty), you might see the following output if you use an include to reconfigure your httpEndpoint. Note that the Liberty log timestamp is only on the first line, as this is a multi-line entry that is (further) not a stack trace:</description></item><item><title>Building portable, 12-factor microservices with WAS Liberty and Bluemix</title><link>/2015/08/12/building-portable-12-factor-microservices-with-was-liberty-and-bluemix.html</link><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>/2015/08/12/building-portable-12-factor-microservices-with-was-liberty-and-bluemix.html</guid><description> Note: Originally posted on IBM DeveloperWorks. Some of this content is old, but the gist is still useful.
The microservices approach for building (or decomposing) complex applications has received a lot of attention because it can bring so many benefits. Small teams work independently on different parts of the application, moving their standalone piece from development to production at their own pace via a devOps/self-service deployment infrastructure.
The key to this application structure is what each piece, each service, does. The phrase “high cohesion and low coupling” strongly applies: each service should do/own/manage whatever is necessary to provide a useful function. Services in this model are not necessarily small, but they are self-contained and can be updated independently.
Microservices applications are built and oriented around decoupled, independent services. This approach is a specific variant of SOA, one that eschews mediating ESBs in favor of smart endpoints that make their own decisions about how to interact with target services.
These independent services are managed in a significantly different way than traditional enterprise applications. Services are made available via collections of individual, transient service instances. The number of instances will vary based on load.
Service upgrades are performed via blue/green (or red/black) deployments: new versions are deployed side-by-side with old versions, with old versions gradually being removed as clients of the service begin using the new version. This is a rip-and-replace upgrade process, where deployed services are replaced with a newer version rather than migrated.
Given all of this, are there best practices for creating microservices? The Twelve-factor application methodology is one frequently referenced approach. It defines factors that services should follow to build portable, resilient applications for cloud environments (SaaS). To quote, 12-factor applications:
Use declarative formats for setup automation, to minimize time and cost for new developers joining the project; Have a clean contract with the underlying operating system, offering maximum portability between execution environments; Are suitable for deployment on modern cloud platforms, obviating the need for servers and systems administration; Minimize divergence between development and production, enabling continuous deployment for maximum agility; And can scale up without significant changes to tooling, architecture, or development practices.
All of the 12 factors can be satisfied by a Java EE 7 application running on WAS Liberty: some factors are specific to how the application is built, some are based on how the supporting server is configured, and some are aspects of the surrounding environment.
If you want to know more about microservices, 12-factor apps, or Java EE 7, we have you covered. Check out the following:
Microservices Architecture (Martin Fowler, martinfowler.com) Microservices: From Theory to Practice. Creating Applications in Bluemix Using the Microservices Approach (IBM Redbook) The 12-factor application (Adam Wiggins, 12factor.net)</description></item></channel></rss>