<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservices on ebullient·works</title><link>/tags/microservices.html</link><description>Recent content in microservices on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Metrics for the win! at J4K Conference</title><link>/2020/11/12/metrics-for-the-win-at-j4k.html</link><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid>/2020/11/12/metrics-for-the-win-at-j4k.html</guid><description>A longer form of Metrics for the Win! recorded for J4K, which occurred in October of 2020.</description></item><item><title>D&amp;D and Metrics: an unexpected journey</title><link>/2020/11/09/an-unexpected-journey-with-metrics.html</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><guid>/2020/11/09/an-unexpected-journey-with-metrics.html</guid><description>I was asked, based solely on the abstract for my 2020 DevNexus talk, if I would be interested in writing an article on the topic. I agreed. The resulting article was published in Germina, in the September 2020 issue of Java Magazin, with &amp;ldquo;Dungeons and Dragons&amp;rdquo; as the title. I have a lovely hard-copy in my office.
The English version has also now been published at JaxEnter, &amp;ldquo;Monsters in combat: exploring application metrics with D&amp;amp;D&amp;rdquo;.
I hope you enjoy it.</description></item><item><title>Metrics for the win! at JConf</title><link>/2020/10/12/metrics-for-the-win-at-jconf.html</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>/2020/10/12/metrics-for-the-win-at-jconf.html</guid><description>A fully online recorded talk, sliding in at just 30 minutes, for JConf in the fall of 2020.</description></item><item><title>Monsters and Metrics at SpringOne 2019</title><link>/2019/10/23/springone-monsters-metrics.html</link><pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate><guid>/2019/10/23/springone-monsters-metrics.html</guid><description>Two things collided in my brain this year ahead of SpringOne: Preparing a new talk from scratch covering the Micrometer (and the related Spring implementation), and learning everything I needed to know to be a Dungeon Master for my 10-year-old son and his friends.
Thanks to a brilliant suggestion from a friend, these two things collided in the talk, too. Which lightened the mental load (or at least reduced the amount of full stack swapping going on).
Github repository: ebullient/monster-combat with Spring Boot 2, WebFlux, and Micrometer</description></item><item><title>What is a Cloud Native application, anyway?</title><link>/2018/03/10/IndexConf-CloudNative.html</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>/2018/03/10/IndexConf-CloudNative.html</guid><description>This is my first attempt at talking about what is going on with Cloud Native applications these days. Given at IndexConf in San Francisco.</description></item><item><title>Game On! Explore microservices with a text-based adventure</title><link>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</link><pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate><guid>/2016/05/16/game-on-explore-microservices-with-a-text-based-adventure.html</guid><description>Microservices: the buzz is everywhere. Given the breadth of technologies related to the term, it can be difficult to get a full picture of what a Microservices architecture should look like, or to understand why it is said that microservices architectures both remove and introduce complexity at the same time. Game On! is a throwback text-based adventure built to help you explore microservices concepts.
Continue with post on IBM developerWorks</description></item><item><title>Swagger-first API design</title><link>/2016/01/27/swagger-first-api-design.html</link><pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate><guid>/2016/01/27/swagger-first-api-design.html</guid><description>&lt;p>I've been working for the past few months on building Game On! a microservices-based application that is intended to show both what a microservices architecture looks like, and to make it easy for people to play with such a system without having to start from the ground up themselves.&lt;/p>
&lt;p>We started with a best-guess set of services, and over time, it became pretty apparent that our first pass at a map building service (the Concierge) was both misleading in purpose and insufficient in function. It did serve its purpose, filling in for service discovery in a way, but we were growing beyond what the service could do. &lt;/p></description></item><item><title>Shell prompt crazy for Git Submodules</title><link>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</link><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</guid><description>I've run a somewhat odd little script to generate my command prompt for years now, sets some colors, adds some indicators of what kind of shell I'm in (sudo or tmux/screen or ssh or.. ).
Given I now have to work with git and submodules, I've revised that to include information provided about git generated by this script: https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
The difference is worth it, in understanding at a glance what is going on without typing git status or variant every two seconds. ;)
I've also been using some very useful aliases to make working with submodules sane, as documented here: Game On! Advanced Adventures / Git Submodules</description></item><item><title>Microservices and WAS Liberty</title><link>/2015/12/11/microservices-and-was-liberty.html</link><pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/11/microservices-and-was-liberty.html</guid><description>Home to Microservices and WAS Liberty resources, which provide background information, getting started guidance, best practices, and methodologies.
Continue with post on IBM developerWorks</description></item><item><title>Trying to tell the human story...</title><link>/2015/12/08/trying-to-tell-the-human-story.html</link><pubDate>Tue, 08 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/08/trying-to-tell-the-human-story.html</guid><description>Writing is always hard. Writing technical stuff is hard. Writing technical stuff that doesn't sound like it is a regurgitated text book&amp;#8230; sigh
I've been leading a team working on or with Microservices at IBM (lots of people everywhere are doing things with microservices, this should come as no surprise). We've been specifically looking at how to modernize an existing Java EE application. There are articles about this, but they are all formal, and (to me) preachy.
We're doing the experiment live, so to speak. Taking the crufty Plants By WebSphere application and pulling it apart bit by bit. Our aim is to make sure you have a functional application at all times, and to frankly just share our thoughts as we try it. Let us know what you think.
Blog posts (there will be more): Rules of Engagement Getting started
Articles (longer lived, some procedure): Decomposition Choosing a candidate Breaking the candidate out into its own microservice</description></item><item><title>Secure Microservices: API Keys, Access Tokens, and Signed JWTs</title><link>/2015/12/04/secure-microservices-api-keys-access-tokens-and-signed-jwts.html</link><pubDate>Fri, 04 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/04/secure-microservices-api-keys-access-tokens-and-signed-jwts.html</guid><description>Some samples demonstrating how to secure your microservices using API keys, access tokens, and JSON Web Tokens (JWTs).
Continue with post on IBM developerWorks</description></item><item><title>Using Grok filters to parse Liberty Logs</title><link>/2015/09/02/logstash-and-liberty-optimizing-data-collection-for-the-cloud.html</link><pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate><guid>/2015/09/02/logstash-and-liberty-optimizing-data-collection-for-the-cloud.html</guid><description>Logstash is a core part of the ELK stack that can be used to pull and tag content in WAS Liberty logs. This post walks through how to configure Logstash to collect and format WAS Liberty logs.
Continue with post on IBM DeveloperWorks</description></item><item><title>Building portable, 12-factor microservices with WAS Liberty and Bluemix</title><link>/2015/08/12/building-portable-12-factor-microservices-with-was-liberty-and-bluemix.html</link><pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate><guid>/2015/08/12/building-portable-12-factor-microservices-with-was-liberty-and-bluemix.html</guid><description>An overview of 12-factor applications, and how a 12-factor application can be built using WAS Liberty and Bluemix.
Continue with post on IBM DeveloperWorks</description></item></channel></rss>