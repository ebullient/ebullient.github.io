<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scripts on ebullient·works</title><link>/tags/scripts.html</link><description>Recent content in scripts on ebullient·works</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 25 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/scripts/index.xml" rel="self" type="application/rss+xml"/><item><title>Scripts for the win! Updating git repositories for the lazy.</title><link>/2019/10/25/scripts-for-the-win-updating-git-repositories-for-the-lazy.html</link><pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate><guid>/2019/10/25/scripts-for-the-win-updating-git-repositories-for-the-lazy.html</guid><description>&lt;p>I love scripts! I treat them as my extended memory. Blog posts used to do this,
but life and children have eaten up the capacity I used to have for writing.&lt;/p>
&lt;p>But I thought I would share my latest script for the lazy (which I have now duplicated several times. I know, I know. WET, DRY. I can&amp;rsquo;t be bothered). This script iterates over all of the git repositories in a sub-directory (where I have several related ones), fetches everything, fast-forwards if it can, and otherwise tries to rebase on the upstream branch if there is one that matches.&lt;/p>
&lt;p>There is an extra case statement at the bottom as I inevitably extend this to do
more things specific to this group of projects. This kind of approach grew out
of the scripts written for Game On!, which still work well, and do their extra
duty reminding me what on earth I was doing the last time I worked on it.&lt;/p></description></item><item><title>Shell prompt crazy for Git Submodules</title><link>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</link><pubDate>Wed, 16 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/16/shell-prompt-crazy-for-git-submodules.html</guid><description>I've run a somewhat odd little script to generate my command prompt for years now, sets some colors, adds some indicators of what kind of shell I'm in (sudo or tmux/screen or ssh or.. ).
Given I now have to work with git and submodules, I've revised that to include information provided about git generated by this script: https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
The difference is worth it, in understanding at a glance what is going on without typing git status or variant every two seconds. ;)
I've also been using some very useful aliases to make working with submodules sane, as documented here: Game On! Advanced Adventures / Git Submodules</description></item><item><title>Which gradle...</title><link>/2015/12/05/which-gradle.html</link><pubDate>Sat, 05 Dec 2015 00:00:00 +0000</pubDate><guid>/2015/12/05/which-gradle.html</guid><description> I am lazy. My fingers have habits that are sometimes hard to change.
I've learned to type gradle, like all the time. Now I need to use gradlew, and for some reason this is difficult.
So I wrote a script, that I've now aliased (whichGradle is now obviously on my path):
alias gradle='whichGradle'
which just does this: if [ -x $PWD/gradlew ]; then echo Using $PWD/gradlew $PWD/gradlew $@ else echo Using `which gradle` gradle $@ fi</description></item><item><title>Docker script for AnyConnect on OSX</title><link>/2015/08/25/docker-script-for-anyconnect-on-osx.html</link><pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate><guid>/2015/08/25/docker-script-for-anyconnect-on-osx.html</guid><description>I am queen of laziness, and I have to use AnyConnect, and that screws with Docker, and then I have to go looking to remember the magic incantation to get things right...
Who has time for that? I made a script that wraps the whole thing up and reminds me what I should do when it doesn't work.
Instead of: &amp;gt; docker-machine env default
I do this instead, and the script does the rest: &amp;gt; . dockerEnv
The contents of the script are pretty trivial (I am sure shell wizards can find plenty wrong with it, starting with the direct reference to bash, but whatever. Laziness, right?): #!/bin/bash UP=`docker-machine status default` if [ "$UP" != "Running" ] ; then echo "Starting default docker VM" docker-machine start default fi eval "$(docker-machine env default)" export DM_IP=$(docker-machine ip default) echo $DM_IP DM_SUBNET=192.168.$(echo $DM_IP| cut -d'.' -f 3) RESULT=`netstat -rn | grep $DM_SUBNET | grep vboxnet` if [ "$RESULT" = "" ] ; then echo "Adding route for vboxnet0" sudo route -nv add -net $DM_SUBNET -interface vboxnet0 RESULT=`netstat -rn | grep $DM_SUBNET | grep vboxnet` if [ $RESULT = "" ] ; then echo "Quit AnyConnect and re-run this script." exit fi fi docker-machine ls [edit on 3 Sept: updated for even better-ness. Laziness rocks.]</description></item></channel></rss>